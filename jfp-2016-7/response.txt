============================================================
Referee: 1

> General assessment of the paper

> The paper proposes a new framework of enumerations,
> i.e. bijections between natural numbers and elements of some
> given type, with an application to property-based software
> testing. A notion of fairness is introduced, meant to capture
> the intuitive balance in compound enumeration exploration,
> supported with a few natural examples of fair and unfair
> enumerations. The supplementary material includes a Coq model
> for a limited subset of the core library combinators, along
> with additional tests and proofs of correctness. Finally, the
> developed implementation is compared with several other
> enumeration techniques on a Redex automated testing benchmark
> [*]. Fair enumerations are argued to constitute effective
> testing tools, contrary to their unfair counterparts.

> General comments

> The article starts with a brief introduction to the subject of
> property-based software testing with an emphasis on
> enumeration-based techniques. The main object of interest,
> i.e. enumerations, is introduces on an informal,
> programmer-like level. This informal narration of the paper
> continues unfortunately to explaining the main components of
> the framework, including below/e, or/e and other key
> combinators. Such a presentation, without a precise
> mathematical treatment, makes it quite difficult to read the
> paper. The informal, almost storytelling-like narrative is
> obfuscating the presented ideas – an example being the
> generalisation of Szudzik’s pairing function to higher
> dimensions. Instead of a mathematical formula or pseudo-code
> with a correctness comment, the reader is given a two paragraph
> intuition behind the generalisation idea (see page 10, section
> 5, paragraphs 5 and 6).

We have added the precise formulas.

> The following section 6, contains a formal model of the
> enumeration framework. The model occupies two full pages and
> stands in contrast to the previous exposition. Readers
> unfamiliar with Coq or Racket are most likely not going to
> follow the presentation at this point. Despite some hopes, 12
> pages into the paper, the definition of fairness is still not
> given. Moreover, the reader is asked to ignore the fairness
> part of the model (see section 6, paragraph 2, line 3). Such an
> exposition is not only bad style, but strengthens the feeling
> of an informal discussion at this point, rather than a rigorous
> treatment of the considered semantics. Fortunately, the given
> model is generally commented, hence it is possible to grasp the
> main idea of the intended framework’s inner workings. That
> being said, some parts of the model are not discussed, e.g. the
> meaning (semantic) of a substitution applied to an
> enumeration (see rule fix/e).

We removed the "ignore it for now" comment, replacing it with a
comment that hopefully is better style. We added a comment about
substitution to the explanation of the fix/e rule.

> Paragraph 9 in the same section, starts with an explanation
> that the actual Coq model is simpler than the model presented
> in the paper. A detailed difference between the two is not
> given, although the Coq model is stated to suffice for proving
> some results about fairness. The expressive power of the Coq
> model is not further discussed. Without it, the following
> theorems, as stated, are unverifiable to the reader. The
> results themselves are a rather simple and intuitive
> exercise. The supplied Coq code does indeed compile although,
> interestingly, not with the newest 8.5pl2 Coq version.

We expanded the discussion that compares the implementation to the
presented model to the Coq model. It now details the exact
differences.

> On page 15, the anticipated definition of fairness is given in
> terms of the trace combinator. The definition depends on the
> semantics of trace/e, however has a nice intuition in terms of
> equilibrium points. The following results are easy consequences
> of the assumed semantics, in particular Szudzik’s pairing
> function and the alternating or/e combinator.  In the reminder
> of the paper, some empirical facts are reported, comparing
> different approaches and techniques of enumeration-based
> testing. Assumed methods of different enumeration tactics are
> tested against a specific automated testing benchmark. A
> partial ordering involving the subsets of detected bugs is
> introduced, creating a final ranking of approaches. According
> to the test results, ad-hoc and fair enumerations found more
> bugs than other, unfair ones. The experiment is supported with
> detailed figures and suitable statistical data.

> It is debatable whether fairness, as formally defined, is a
> suitable measure of the intuitive fairness as discussed
> throughout the paper. An enumeration e is said to be f-fair, if
> f defines the equilibria of e. It means that each fair
> enumeration is f-fair for some recursive function f. In
> particular, an enumeration that reaches equilibria in A(n,n)
> for n ∈ N where A is the Ackermann function, is also
> fair. Clearly, this is an exaggeration but highlights the fact
> that fair (intuitively speaking) enumerations ought to be
> f-fair for some slowly growing function, e.g. polynomial. This
> is precisely the case for enumerations explicitly given in the
> paper, where each of them is f-fair for some low degree
> polynomial f.

> It is not discussed in the paper what kind of restrictions were
> actually imposed on the fair enumerations in the conducted
> experiment. In other words, how fair were the enumerations in
> question. The above discussed subtlety implies that it would be
> theoretically possible to design a set of fair enumeration with
> arbitrary fast growing fairness functions and draw the precise
> opposite conclusions as in the paper – the unfair enumerations
> could be indistinguishable from the fair ones in any practical
> amount of time and space. For that reason, I suggest a stronger
> criterion for fair enumerations incorporating the asymptotic
> growth rate of fairness functions. Such a definition would also
> add precise meaning to the informal notions of ‘mildly’ or
> ‘brutally’ (un)fair functions.

The experiment was conducted with the fair (and unfair) enumerations
described earlier in the paper. We have clarified this point.

Unfortunately, We do not have a mathematically precise way to
characterize the relative unfairness to offer. Figuring out such a
definition would be interesting, but seems beyond the scope of the
present paper.

> Conclusions

> The paper presents a new library for enumeration-based
> testing. Unfortunately, the paper is written in an intuitive
> narration, with little solid and precise mathematical treatment
> in the paper itself. Interesting formalisms are available in
> the supplementary material. Without them, the paper cannot be
> considered complete. The definition of fairness is, as
> discussed earlier, far from being a robust theory and presents
> little interests to the reader unfamiliar with either Coq or
> Racket. Readers interested in functional programming or
> enumeration-based testing in general, as myself, will find the
> paper hard to read and appreciate, without actually using the
> developed library. In conclusion, the submission presents a
> nice library for enumeration-based testing, but unfortunately
> little beyond that.

We agree that the supplementary material is crucial and we plan to
maintain the coupling between the supplementary material and the paper
as long as is humanly possible.

> [*] http://docs.racket-lang.org/redex/benchmark.html

============================================================
Referee: 2

> This paper describes a technique for generating enumerators by
> composing them, introduces "fairness" as a property that can measure
> how well the composition is defined, and assesses the value of
> fairness for detecting bugs in the context of property-based
> testing.

> The paper is interesting; the authors argue that fair enumeration
> combinators are useful in property-based testing, they give a
> criterion for fairness, and they demonstrate that their
> implementation is practical.

> The material is well presented, and even though I am not familiar
> with racket, I was able to understand the technical material. The
> paper is well structured, the motivation is clear from the
> beginning, with the first three sections providing plenty of
> background.

> I do have some minor comments about how the figures that introduce
> the semantics of the combinators might be improved, but this does
> not remove from the overall contribution of this paper. On the
> whole, I think that the required revisions are minor, after which
> this should be accepted.

> Minor comments
> --------------
> p1. My initial reaction to the introduction was that it was missing
>   motivation; p2 states that enumerations are used for bug finding,
>   but it might be a good idea to have that up-front at the beginning
>   of the paper.

We have added that to the first sentence.

> p2. The text uses double quoted letters as in `"x" coordinate
>   values` in the main text. I think the quoting looks a bit odd; it
>   would be better to just use the math font for these names as in
>   $x$ coordinate.

Fixed, thanks.

> p2. n-ary combinators ~> $n$-ary combinators [to be consistent with
>   what is in the abstract]

Fixed, thanks.

> p3. For the non-racketeers, it would be nice to have a description
>   of what `[#f #t]` does. (I think this is the only point where I
>   didn't have a good intuition for what this did: this is a good
>   place for me to say that notes like the one on p5 about legal
>   character identifiers was great; thanks!).

We changed the representation of trees to use a (nullary) structure to
represent leaves instead of using #f. Hopefully this makes the code
self-explanatory now.

> p4. The detailed discussion that shows "the smallest natural that
>   demonstrates the difference is 345" seems a bit too specific given
>   that we don't know in detail what the library is doing. Being this
>   specific doesn't seem to convey much meaning.

Revised, thanks.

> p8. "This section introduces our definition of fairness in a precise
>   but informal way" ... "roughly equally" in the next sentence
>   didn't read as that precise to me.

Indeed! Revised.

> p11. I found it odd that the formal model is well-typed but that the
>   implementation has no types.

We've added a comment to the formal section where the three variants
(Redex model, Coq model, implementation) are discussed together.

In short, contracts give us flexibility to have precise specs of the
values for all enumerations, even ones that arise as a complex
enumeration is built up (e.g., non-empty lists, positive numbers,
rational numbers with a specific denominator, etc.)

> p11. Inconsistency in fonts for `fix/e` and `delay/e`, which I
>   couldn't explain.

Clarified in that sentence. (The typography is intended to indicate the
model vs the implementation. Fixed width font with colors is code; the
sans-serif black indicates keywords from the model.)

> p11. "our implementation fails to terminate when [...]" seems a bit
>   too sparse a description of what is going on. I think more detail
>   here is needed.

We deleted this sentence. It was not a helpful comment, overall.

> p23. At the end of the section I felt like I hadn't understood the
>   ad-hoc random generator enough to make the comparison meaningful.
>   Could something more be said about it?

We've added a brief explanation of the algorithm it uses.

============================================================
Referee: 3

> Comments to the Author
> Paper overview:

> The paper describes a combinator library for enumerating sets of
> values by a bijection to/from the natural numbers. It deals with the
> issue of finding suitable bijections from a single index to n-tuples
> of indexes for sub-enumerations, particularly for a product
> operator.  Suitability ultimately means ability to discover bugs
> using property based testing, but this is approximated by a property
> called fairness, that is claimed to correlate with bug-finding
> capacity.

> The authors first show a really bad bijection, that enumerates an
> astounding number of similar and highly unbalanced binary trees
> before backtracking to some very small balanced ones. The authors
> then show how fast a good bijection finds the same simple tree, and
> argue that this difference can be attributed to the fairness
> property of the good bijection.

> A bijection from indexes to tuples is fair if none of the elements
> of the tuple has a consistently larger range of used
> values. Particularly the enumeration sequence produced by the
> bijection needs to have reoccurring equilibrium points, where the
> set of values used for all component are equal.

> The enumeration approach is quite appealing. At first it seems like
> it is just a bijective function and the "splitting function" (the
> bijection between tuples and single indexes) does all the work, but
> it is made more complicated by the presence of finite enumerations
> and the need to keep track of the cardinality for enumerations and
> add special cases for when one or more of them are finite. There are
> also some pitfalls with termination of recursive enumerations.

> --
> Comments:

> There are two important issues I would like the paper to address:

> * I would like a stronger argument for why the presence/absence of
>   fairness is the property that result in the differences in
>   bug-finding capacity that you demonstrate. It seems easy to turn a
>   fair enumeration into an unfair one with the same quality (just
>   "delay" all equilibrium points by one position in the
>   enumeration?). It also seems possible to take a bad enumeration
>   and make it fair, although that is probably a lot more
>   contrived. Maybe fairness works pragmatically for bijections that
>   "occur naturally" but then I would like this to be stated.
>
> Another example: If I take (almost) any enumeration and interleave
> it with an incomplete enumeration that takes the (n-dimensional)
> diagonal (0 0 .. 0) (1 1 .. 1) (2 2 .. 2) so every other value is
> taken from this diagonal and every other from the complete
> enumeration (modified where needed to avoid repeating the diagonal
> values). The diagonal will do all the "exploration", and thus every
> other value (or every value?) will be an equilibrium point - meaning
> it would be an extremely fair enumeration?

> * You provide a recursive definition of an enumerator for lists of
>   natural numbers (p. 6), but the definition seems to suffer from
>   the same kind of unfair distribution as the 4-tuples on
>   p. 8. Worse, this seems to fall outside your definition of
>   fairness, since a list combinator would only take a single
>   argument. Is there any way to solve this?

> Minor issues:

>  * How does or/e handle mixes of finite/infinite? This is not
>  specified on page 5 and the description on page 11 is rather
>  confusing since it seems to assume all arguments are infinite.

>  * On page 5, you write "If one of the input enumerations is finite,
>  the result enumeration loops through the finite enumeration,
>  pairing each with an element from the infinite enumeration." This
>  sentence is a bit unclear. I take this to mean that you do not do
>  any "diagonalization" of these products. But what about large
>  finite enumerations, like an enumeration of the 32-bit integers or
>  an enumeration of ASCII characters?

>  * Page 5: I would expect an enumeration of strings to start with
>  "". Is it an enumeration of characters? Maybe this is also related
>  to the issue above?

>  Page 6: "Since it is not possible to statically know whether a
>  recursive enumeration uses its parameter, we leave it to the caller
>  to determine the correct size, defaulting to infinite if not
>  specified."

>  Page 7: "The troublesome case is when the dependent
>  enumerations are all finite". Isn't the mixed case just as
> problematic?

>  Page 9: The diagrams in figure 2 are hard to understand.  Maybe the
>  figure label should clarify what the axes are and what
>  distinguishes the different diagrams in each row.

>  Page 15: This is the first time I understood precisely what you
>  meant by fairness. Maybe you should clarify in the informal
>  definition that you look independently at the set of used indexes
>  for each parameter. This definition is also easy to miss in the
>  "Enumeration Semantics" section.

>  Page 24: You write "Unfortunately, the distance between equilibrium
>  points double at each step" I fail to see how you calculate this,
>  or why it is unfortunate. It seems Feat does what you describe as
>  tempting on page 8 and uses size as a measure of fairness (small
>  values before large values), and the definition of size is the
>  extra information you mention.
