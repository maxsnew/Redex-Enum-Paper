Thanks to the reviewers for their time, energy, and helpful
comments. For comments we don't address explicitly here, we
plan to follow the reviewers' advice. Thanks again.

Reviewers A and B ask about the subset of combinators that our
formalization covers: we chose them because they are the fair
combinators from our implementation. It would be straightforward to
include all of the combinators of the library, but it distracts from
our focus on fairness.

Reviewers B and D both correctly identify that our notion of fairness
is coarse, it does not rule out exponentially far apart equilibria or
other such bad behavior.

Our interest in fairness, however, is more focused on avoiding
unfairness. That is, much like how definitions of soundness must
reject some correct programs and don't generally specify how big or
useful the set of accepted programs is, we are concerned with avoiding
unfair enumerations as we know they are certainly problematic. We will
clarify this in the paper.

We like Reviewer D's suggestion to refine our notion of fairness so it
is parameterized over a function characterizing when equilibria
occur. We updated the definitions in our Coq script and have proved
that pairing reaches equilibrium at (n+1)^2 and alternation at 2*(n+1).

Reviewer B asks a number of other excellent questions.

Fairness for dependent enumerations and fairness generally: we have
thought about this some, but have not found a satisfactory way to
generalize our notion of fairness to dependency. And yes, fairness
doesn't compose; this is part of why we believe it deserves study.

Elias coding, etc: sampling using Elias codes seems similar to what
we're doing (choosing an exponent and the choosing the bits). The
geometric distribution is not good because it generates numbers
near some fixed natural. Not having a fixed mean means that the
average of the first X samples is likely to be smaller than the
average of, say, the first 2*X samples (for any X).

Reviewer C asks about contracts: we use contracts because they are
like dependent types, giving us very fine-grained control, but
without having the proof burden (which would be difficult to
accommodate in Redex).

Reviewer D points out errors in our bibliography: thanks! We will fix
them.

And finally, since the submission deadline we learned that we
mischaracterized the original Feat work. In particular,
the enumerator for (Integer,(Integer,Integer)) does not use
nested pairing, contrary to our claim. The feat paper doesn't discuss
the concept of fairness nor does it provide any proofs, so we do not
think this error impacts the contribution of work. That said, we are
ashamed of this mistake and will correct it.

Based on experimentation with Feat's implementation and discussion
with others knowledgeable about Feat, we believe Feat reaches
equilibria less frequently than our library. Pairing unary naturals
(as in the paper), reaches equilibria O(n^2) often. In their
implementation, the cost is the number of bits in a number and that
reaches equilibria only O(2^n) often. Alternation also reaches
equilibria O(2^n) often in Feat's implementation.
