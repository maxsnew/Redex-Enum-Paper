For POPL revision:
 - write introduction
 - future work (explain that this definition makes sense only for non-unary
   combinators, but mention the two different list enumerations)
 - add to model: except/e, fix/e, finite enumerations(?)
 - prove feat combinators(?)

* TODO
  1. [X] Model extension for trinary combinators
  2. [X] port coq model back to redex             (Robby)
  3. [ ] automated testing of coq = redex = data/enumerate (Max + Robby)
  4. [ ] New benchmarks (Burke)
  5. [-] write the dang paper                     (Max + everyone)
     1. [ ] writeup of bounded-list/e                (Max)
     2. [ ] rewrite fairness section                 (Max)
        1. [ ] Use common terminology:
           1. [ ] Complete trace vs Trace from 0 to n
           2. [ ] Trace from to ?
           3. [ ] State which proofs are formalized in coq
     3. [X] redex ambiguity                          (Robby)
     4. [X] Fix Figure 3 (both sides are fair)
     5. [ ] Double down on fairness
        1. [ ] call out all the other libraries. If they had written
           binary combinators unfairly by default that would seem
           arbitrary, so why do we let them get away with it for n-ary?
     6. [ ] figure out what to do with this cite:
  6. [ ] prepare supplementary material

@inproceedings{ppdp14tarau,
        Address = {New York, NY, USA},
        Author = {Tarau, Paul},
        Booktitle = {{PPDP '14: Proceedings of the 16th international ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming}},
        Location = {Canterburry, U.K.},
        Publisher = {ACM},
        Title = {{ Bijective Collection Encodings and Boolean Operations with Hereditarily Binary Natural Numbers}},
        Year = {2014}}

- figure out what to do with fairness for dep/e. Viable options seem to be:

  1. say nothing

  2.  explain how to make what appears to be fair enumeration of lists.
      => explain no proofs
      => explain it is sloooow
      => back things up with graphs
      => explain that we don't yet use this technique in Redex
