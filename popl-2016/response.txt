Thanks to all the reviewers for the time they put into the paper. We
especially appreciate the explicit and implicit comments that will
help us improve the presentation and we expect to use them to the
benefit of the work.

Review 138A:

f-fairness is defined in terms of fairness. Fairness uses traces to
define what the equilibrium points are, namely the values of "M" in
the definition at the bottom of page 7. The omission of a more
explicit connection was an oversight and has been corrected in our
version of the paper.

The reviewer asks why contracts are needed. We use them because they
can express dependent types. For example, the contracts express that
the arguments to map/e form a bijection. Given that this is a
practical, deployed system, we don't have the advantage of using
dependent types directly like we do in the Coq model.

Review 138B:

The reviewer suggests that accounting only for the size of enumerated
structures is sufficient. But this would ignore fairness, because
there our fair pairing combinator and the commonly used unfair pairing
combinator have the same memory use. Our empirical evaluation proves
that distinguishing them is essential.

We did not find any fundamental flaws in our reasoning via Coq, but we
did find that the exercise of implementing the semantics (in Redex and
in Coq) clarified the concepts. We credit that clarity with helping us
to come up with the idea of using traces.

Yes, poor choice of benchmarking programs can skew results. Our
benchmark, however, has been very carefully designed. It was one of
the products of one of the author's PhD thesis and you can find more
explanation of it here: http://docs.racket-lang.org/redex/benchmark.html
