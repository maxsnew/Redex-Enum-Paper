==== Review E ===

Much of your review matches Review A, so we won't repeat those
comments here. But yes: our more general set of combinators and the
notion of fairness are the main contributions, in our opinion.

As for Feat, the two main differences are our support for n-ary fair
combinators and our support for dependency. Redex currently uses
dependency only a little (because dependency is more expensive than
other combinators, so we work hard to avoid it when possible for
Redex) but it is necessary to support certain Redex programs
(discussed at the bottom of page 15 and the top of 16).

Dependency is, generally speaking, very natural. As one example, it is
needed to support enumeration of well-typed terms, or even closed
ones. The Redex enumerators currently generate all possible variable
names because Redex doesn't have special support for binding
forms. That support is currently being implemented, however, and part
of that effort is to change the how enumeration works (using
dependency more).

Dependent enumeration is also used in the game Tally Maze (included in
"PLT Games" in the Racket distribution) to enumerate mazes.


[ content above the line added after review E appeared ]
-------------------------------------------------------------------

==== Review A ===

After reading your review and reflecting on it, we completely agree
that the clarifying power of a formal semantics would be a huge help
to readers. We plan to include one in future versions of this paper
(and indeed have already started working on it). Explaining the
translation to Redex more carefully is similarly important and we plan
to improve that too.

=== Review C ===

You seem to be asking us to work on a different problem that the one
we chose to work on. Yes, taking the property into account can be more
productive when there is information that's easily accessible, but
that information is not always going to be accessible for a variety of
reasons. Furthermore, fair enumerators are "best-effort" to ensure
that the generator is not biased in ways bad for testing. A more
experienced user can then use the enumeration system as a library for
constructing generators that are biased towards generating more useful
inputs as they choose without having to worry about a bias that cannot
be overcome because it is part of the core enumeration library.

Meanwhile, you seem to have made a technical error in your comments.
The "in-order" and "uniform random" are both using the enumeration
system and the fact that "a combination of in order and ad hoc
outperforms the fair technique in all cases" is to be expected since
it combines our technique with a complementary one.

=== Reviewer D ===

re "QUESTION": yes, that is our claim.




A special thanks to reviewers B and D for pointing out those
papers. We agree that they could be useful in extensions of our work.
